// Esperar a que todo el DOM est√© cargado antes de ejecutar
document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("registroForm");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // 1Ô∏è‚É£ Capturar los valores del formulario
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();
    const correo = document.getElementById("correo").value.trim();
    let celular = document.getElementById("celular").value.trim();
    const contrase√±a1 = document.getElementById("contrase√±a1").value;
    const contrase√±a2 = document.getElementById("contrase√±a2").value;

    // 2Ô∏è‚É£ Validar campos vac√≠os antes de continuar
    if (!nombre || !apellido || !correo || !celular || !contrase√±a1 || !contrase√±a2) {
      alert("‚ö†Ô∏è Todos los campos son obligatorios.");
      return;
    }

    // 3Ô∏è‚É£ Validar formato b√°sico de correo electr√≥nico
    const regexCorreo = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!regexCorreo.test(correo)) {
      alert("üìß Ingresa un correo electr√≥nico v√°lido.");
      return;
    }

    // 4Ô∏è‚É£ Verificar si las contrase√±as coinciden
    if (contrase√±a1 !== contrase√±a2) {
      alert("üîí Las contrase√±as no coinciden.");
      return;
    }

    // 5Ô∏è‚É£ Validar que la contrase√±a sea segura
    const regexSegura = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*.,;:_\-]).{8,}$/;
    const prohibidas = ["12345", "password", "contrase√±a", "abc123", "qwerty", "admin", "user"];

    if (prohibidas.includes(contrase√±a1.toLowerCase())) {
      alert("üö´ La contrase√±a es demasiado com√∫n, elige otra m√°s segura.");
      return;
    }

    if (!regexSegura.test(contrase√±a1)) {
      alert("‚ö†Ô∏è La contrase√±a debe tener al menos 8 caracteres, incluir may√∫scula, min√∫scula, n√∫mero y s√≠mbolo.");
      return;
    }

    // 6Ô∏è‚É£ Normalizar tel√©fono (agregar +57 si no lo tiene)
    if (!celular.startsWith("+")) {
      if (/^[0-9]{10}$/.test(celular)) {
        celular = "+57" + celular;
      } else {
        alert("üì± Ingresa un n√∫mero v√°lido (10 d√≠gitos) o con c√≥digo internacional (+57...).");
        return;
      }
    }

    // 7Ô∏è‚É£ Crear objeto con datos listos para enviar
    const data = {
      name: nombre,
      lastname: apellido,
      email: correo,
      phone: celular,
      password: contrase√±a1
    };

    // 8Ô∏è‚É£ Deshabilitar bot√≥n temporalmente mientras se env√≠a
    const submitBtn = form.querySelector("button[type='submit']");
    submitBtn.disabled = true;
    submitBtn.textContent = "Enviando...";

    try {
      // 9Ô∏è‚É£ Enviar datos al backend (ruta /auth/registro)
      const res = await fetch("/auth/registro", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      const result = await res.json();

      // 10Ô∏è‚É£ Mostrar mensajes seg√∫n respuesta del backend
      if (result.error) {
        alert("‚ùå " + result.error);
      } else {
        alert("‚úÖ " + result.message);
        // Guardar el tel√©fono en sessionStorage para uso futuro (por ejemplo, reenviar c√≥digo)
        sessionStorage.setItem('registeredPhone', celular);
        // Redirigir a la p√°gina de verificaci√≥n
        window.location.href = result.redirect || '/verificar';
      }
    } catch (err) {
      console.error("Error al registrar:", err);
      alert("üö´ Error de conexi√≥n con el servidor. Intenta nuevamente.");
    } finally {
      // üîÅ Restaurar el bot√≥n siempre
      submitBtn.disabled = false;
      submitBtn.textContent = "Crear cuenta";
    }
  });
});
