require('dotenv').config(); // Carga las variables de entorno desde .env (como claves de Twilio)
const express = require('express'); // Importa Express (framework de servidor)
const bcrypt = require('bcryptjs'); // Librer√≠a para encriptar contrase√±as
const twilio = require('twilio'); // Cliente oficial de Twilio (para enviar SMS)
const User = require('../models/user'); // Modelo User (tabla usuarios en la BD)


const { OAuth2Client } = require('google-auth-library');
const clients = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

const router = express.Router(); // Crea un enrutador de Express
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Inicializa Twilio con tus credenciales

//  Funci√≥n auxiliar: Normaliza el tel√©fono al formato internacional (+57 para Colombia)
function normalizePhone(phone) {
  if (!phone) return null;
  phone = phone.trim(); // Elimina espacios
  if (phone.startsWith('+')) return phone; // Si ya empieza con +, lo devuelve igual
  if (/^[0-9]{10}$/.test(phone)) return `+57${phone}`; // Si son 10 d√≠gitos, a√±ade +57
  return phone; // En otros casos, lo devuelve como est√°
}

//  Ruta: REGISTRO DE USUARIO
router.post('/registro', async (req, res) => {
  try {
    let { name, lastname, email, phone, password } = req.body; // Extrae datos del cuerpo de la petici√≥n
    phone = normalizePhone(phone); // Normaliza el n√∫mero

    //  Validaci√≥n: Todos los campos son obligatorios
    if (!name || !lastname || !email || !phone || !password) {
      return res.status(400).json({ error: 'Faltan datos obligatorios' });
    }

    //  Encripta la contrase√±a antes de guardarla en la BD
    const hashedPassword = await bcrypt.hash(password, 10);

    //  Guarda el usuario en la base de datos
    await User.create({
      name,
      lastname,
      email,
      phone,
      password: hashedPassword,
      phone_verified: false // Por defecto no verificado
    });

    //  Genera un c√≥digo OTP de 6 d√≠gitos
    const code = Math.floor(100000 + Math.random() * 900000);
    req.session.otp = String(code); // Guarda OTP en sesi√≥n
    req.session.phone = phone; // Guarda tel√©fono en sesi√≥n
    req.session.lastPlainPassword = password; // Guarda contrase√±a en texto plano solo temporalmente (NO recomendable en producci√≥n)

    //  Env√≠a el OTP por SMS usando Twilio
    await client.messages.create({
      body: `Tu c√≥digo de verificaci√≥n es: ${code}`,
      from: process.env.TWILIO_FROM_NUMBER,
      to: phone
    });

    //  Responde al cliente
    return res.json({ redirect: '/verificar', message: 'Usuario registrado. C√≥digo enviado por SMS üì≤' });
  } catch (err) {
    console.error('Error /auth/registro:', err);
    return res.status(400).json({ error: 'Error al registrar usuario' });
  }
});

//  Ruta: VERIFICAR OTP
router.post('/verificar', async (req, res) => {
  try {
    const { codigo } = req.body; // C√≥digo ingresado por el usuario
    const phone = req.session.phone; // N√∫mero guardado en sesi√≥n

    //  Validar que haya sesi√≥n y OTP activos
    if (!phone || !req.session.otp) {
      return res.status(400).json({ success: false, message: 'No hay c√≥digo activo. Reg√≠strate nuevamente.' });
    }

    // Si el c√≥digo es correcto, marca el usuario como verificado
    if (String(codigo) === String(req.session.otp)) {
      await User.update({ phone_verified: true }, { where: { phone } });
      delete req.session.otp; // Elimina OTP de la sesi√≥n
      delete req.session.phone; // Elimina tel√©fono de la sesi√≥n

      return res.json({ success: true, message: 'N√∫mero verificado correctamente' });
    } else {
      return res.status(400).json({ success: false, message: 'C√≥digo incorrecto' });
    }
  } catch (err) {
    console.error('Error /auth/verificar:', err);
    return res.status(500).json({ error: 'Error al verificar el c√≥digo' });
  }
});

//  Ruta: LOGIN
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body; // Obtiene email y contrase√±a
    const user = await User.findOne({ where: { email } }); // Busca el usuario en la BD
    if (!user) return res.status(400).json({ error: 'Usuario no encontrado' });

    //  Compara la contrase√±a ingresada con la encriptada
    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(400).json({ error: 'Contrase√±a incorrecta' });

    //  Si no ha verificado su tel√©fono, no deja iniciar sesi√≥n
    if (!user.phone_verified) {
      return res.status(403).json({ error: 'Verifica tu n√∫mero antes de iniciar sesi√≥n üì±' });
    }

    //  Guarda datos importantes en la sesi√≥n del usuario
    req.session.userId = user.id;
    req.session.userName = user.name;
    req.session.userEmail = user.email;
    req.session.userPlainPassword = password;

    return res.json({ message: 'Inicio de sesi√≥n correcto', redirect: '/home' });
  } catch (err) {
    console.error('Error /auth/login:', err);
    return res.status(500).json({ error: 'Error en el servidor' });
  }
});

//  Ruta: SESI√ìN ACTUAL
router.get('/session', (req, res) => {
  if (req.session.userId) {
    res.json({
      loggedIn: true,
      name: req.session.userName,
      email: req.session.userEmail,
      password: req.session.userPlainPassword || null
    });
  } else {
    res.json({ loggedIn: false });
  }
});

//  Ruta: CERRAR SESI√ìN
router.post('/logout', (req, res) => {
  req.session.destroy(() => {
    res.json({ success: true, message: 'Sesi√≥n cerrada' });
  });
});

//  Ruta: CAMBIAR CONTRASE√ëA
router.put('/change-password', async (req, res) => {
  try {
    // 1Ô∏è Verificar si hay sesi√≥n activa
    if (!req.session.userId) {
      return res.status(401).send('No autorizado. Inicia sesi√≥n.');
    }

    const { actual, nueva } = req.body; // Contrase√±a actual y nueva

    if (!actual || !nueva) {
      return res.status(400).send('Faltan campos obligatorios.');
    }

    // 2Ô∏è Buscar usuario por ID
    const user = await User.findByPk(req.session.userId);
    if (!user) {
      return res.status(404).send('Usuario no encontrado.');
    }

    // 3Ô∏è Verificar si la contrase√±a actual es correcta
    const isMatch = await bcrypt.compare(actual, user.password);
    if (!isMatch) {
      return res.status(400).send('La contrase√±a actual no es correcta.');
    }

    // 4Ô∏è Encriptar la nueva contrase√±a
    const hashedPassword = await bcrypt.hash(nueva, 10);

    // 5Ô∏è Actualizar contrase√±a en la BD
    await User.update({ password: hashedPassword }, { where: { id: user.id } });

    // 6Ô∏è Eliminar contrase√±a en texto plano de la sesi√≥n por seguridad
    delete req.session.userPlainPassword;

    res.status(200).send('Contrase√±a actualizada correctamente ');
  } catch (err) {
    console.error('Error en /auth/change-password:', err);
    res.status(500).send('Error interno del servidor.');
  }
});

// Login con Google
router.post('/google-login', async (req, res) => {
  try {
    const { id_token } = req.body;
    if (!id_token) return res.status(400).json({ error: 'Falta token de Google' });

    // Validar el token con Google
    const ticket = await clients.verifyIdToken({
      idToken: id_token,
      audience: process.env.GOOGLE_CLIENT_ID
    });

    const payload = ticket.getPayload();
    const email = payload.email;
    const name = payload.given_name || '';
    const lastname = payload.family_name || '';

    // Buscar usuario en DB
    let user = await User.findOne({ where: { email } });

    // Si no existe, lo creamos autom√°ticamente
    if (!user) {
      user = await User.create({
        name,
        lastname,
        email,
        phone: '',
        password: '',
        phone_verified: true
      });
    }

    // Guardamos sesi√≥n
    req.session.userId = user.id;
    req.session.userName = user.name;
    req.session.userEmail = user.email;

    return res.json({ message: 'Login con Google exitoso', redirect: '/home' });
  } catch (err) {
    console.error('Error /auth/google-login:', err);
    return res.status(500).json({ error: 'Error en Google login' });
  }
});

module.exports = router; // Exporta el enrutador para usarlo en el servidor principal
